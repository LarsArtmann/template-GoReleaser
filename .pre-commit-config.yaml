# Pre-commit configuration for GoReleaser Template Project
# See https://pre-commit.com for more information

repos:
  # Go formatting and imports
  - repo: https://github.com/dnephin/pre-commit-golang
    rev: v0.5.1
    hooks:
      - id: go-fmt
        name: Go Format
        description: Runs gofmt, requires golang
        entry: gofmt
        language: system
        files: '\.go$'
        args: [-w, -s]
      
      - id: go-imports
        name: Go Imports
        description: Runs goimports, requires golang.org/x/tools/cmd/goimports
        entry: goimports
        language: system
        files: '\.go$'
        args: [-w, -local, github.com/LarsArtmann/template-GoReleaser]

      - id: go-mod-tidy
        name: Go Mod Tidy
        description: Runs go mod tidy, requires golang
        entry: go
        language: system
        files: '(go\.mod|go\.sum|\.go)$'
        args: [mod, tidy]
        pass_filenames: false

      - id: go-vet-mod
        name: Go Vet
        description: Runs go vet, requires golang
        entry: go
        language: system
        files: '\.go$'
        args: [vet, ./...]
        pass_filenames: false

  # Go linting with golangci-lint
  - repo: https://github.com/golangci/golangci-lint
    rev: v1.55.2
    hooks:
      - id: golangci-lint
        name: Go Lint
        description: Runs golangci-lint
        entry: golangci-lint
        language: system
        files: '\.go$'
        args: [run, --fix, --timeout=5m]
        pass_filenames: false

  # Security scanning with gosec
  - repo: https://github.com/securecodewarrior/sast-scan
    rev: master
    hooks:
      - id: gosec
        name: Go Security Check
        description: Runs gosec security scanner
        entry: gosec
        language: system
        files: '\.go$'
        args: [-fmt=json, -out=gosec-report.json, -stdout, -verbose=text, ./...]
        pass_filenames: false

  # Conventional commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        name: Conventional Commit
        description: Ensures commit messages follow conventional format
        stages: [commit-msg]
        args: [--strict, --optional-scope]

  # YAML/JSON/Markdown linting
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Trim Trailing Whitespace
        description: Trims trailing whitespace
        args: [--markdown-linebreak-ext=md]
      
      - id: end-of-file-fixer
        name: Fix End of Files
        description: Makes sure files end in a newline and only a newline
      
      - id: check-yaml
        name: Check YAML
        description: Attempts to load all yaml files to verify syntax
      
      - id: check-json
        name: Check JSON  
        description: Attempts to load all json files to verify syntax
      
      - id: check-toml
        name: Check TOML
        description: Attempts to load all toml files to verify syntax
      
      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Check for files that contain merge conflict strings
      
      - id: check-added-large-files
        name: Check for added large files
        description: Prevent giant files from being committed (default=500kB)
        args: ['--maxkb=1000']
      
      - id: check-case-conflict
        name: Check for case conflicts
        description: Check for files with names that would conflict on case-insensitive filesystems
      
      - id: check-executables-have-shebangs
        name: Check that executables have shebangs
        description: Checks that non-binary executables have a proper shebang
      
      - id: check-shebang-scripts-are-executable
        name: Check that scripts with shebangs are executable
        description: Checks that scripts with shebangs are executable
      
      - id: mixed-line-ending
        name: Mixed line ending
        description: Replaces or checks mixed line ending

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Dockerfile Lint
        description: Runs hadolint Docker linter
        files: '^Dockerfile.*'

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        name: Markdown Lint
        description: Run markdownlint on markdown files
        files: '\.md$'
        args: ['--fix', '--disable', 'MD013', 'MD033', 'MD041']

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Shell Check
        description: Shell script analysis tool
        files: '\.(sh|bash)$'
        args: [--severity=warning]

  # Go test coverage
  - repo: local
    hooks:
      - id: go-test-coverage
        name: Go Test Coverage
        description: Run tests with coverage and ensure minimum threshold
        entry: scripts/test-coverage.sh
        language: script
        files: '\.go$'
        pass_filenames: false

# Global configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false