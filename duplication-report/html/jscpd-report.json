{
  "statistics": {
    "detectionDate": "2025-08-11T05:31:57.953Z",
    "formats": {
      "javascript": {
        "sources": {
          "web/static/js/app.js": {
            "lines": 327,
            "tokens": 1595,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "duplication-report/html/js/prism.js": {
            "lines": 15,
            "tokens": 4580,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 342,
          "tokens": 6175,
          "sources": 2,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "css": {
        "sources": {
          "web/static/css/style.css": {
            "lines": 129,
            "tokens": 630,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "duplication-report/html/styles/prism.css": {
            "lines": 7,
            "tokens": 232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 136,
          "tokens": 862,
          "sources": 2,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "go": {
        "sources": {
          "internal/server/service/validation.go": {
            "lines": 205,
            "tokens": 1675,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/server/service/template.go": {
            "lines": 50,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/server/service/config.go": {
            "lines": 166,
            "tokens": 1161,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "web/templates/index_templ.go": {
            "lines": 68,
            "tokens": 565,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 95,
            "duplicatedTokens": 1004,
            "percentage": 139.71,
            "percentageTokens": 177.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "web/templates/config_templ.go": {
            "lines": 68,
            "tokens": 565,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 42,
            "duplicatedTokens": 446,
            "percentage": 61.76,
            "percentageTokens": 78.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "web/templates/base_templ.go": {
            "lines": 60,
            "tokens": 520,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 226,
            "percentage": 35,
            "percentageTokens": 43.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/validation_test.go": {
            "lines": 388,
            "tokens": 3256,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 74,
            "duplicatedTokens": 638,
            "percentage": 19.07,
            "percentageTokens": 19.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/main_test.go": {
            "lines": 78,
            "tokens": 518,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/license_test.go": {
            "lines": 287,
            "tokens": 2561,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 76,
            "duplicatedTokens": 798,
            "percentage": 26.48,
            "percentageTokens": 31.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/justfile_test.go": {
            "lines": 485,
            "tokens": 4220,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 91,
            "duplicatedTokens": 943,
            "percentage": 18.76,
            "percentageTokens": 22.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/goreleaser_test.go": {
            "lines": 331,
            "tokens": 2959,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 146,
            "percentage": 6.04,
            "percentageTokens": 4.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/components_test.go": {
            "lines": 348,
            "tokens": 3057,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 311,
            "percentage": 8.91,
            "percentageTokens": 10.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/bash_validation_test.go": {
            "lines": 398,
            "tokens": 3514,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/helpers/test_helpers.go": {
            "lines": 259,
            "tokens": 1987,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 60,
            "duplicatedTokens": 466,
            "percentage": 23.17,
            "percentageTokens": 23.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/fixtures/test_configs.go": {
            "lines": 168,
            "tokens": 382,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/validation/variables_test.go": {
            "lines": 292,
            "tokens": 2706,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/validation/variables.go": {
            "lines": 396,
            "tokens": 2810,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/validation/validators_test.go": {
            "lines": 648,
            "tokens": 4199,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 48,
            "duplicatedTokens": 264,
            "percentage": 7.41,
            "percentageTokens": 6.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/validation/validators.go": {
            "lines": 432,
            "tokens": 2792,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/validation/types_test.go": {
            "lines": 240,
            "tokens": 2363,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/validation/types.go": {
            "lines": 274,
            "tokens": 1884,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/validation/service_test.go": {
            "lines": 374,
            "tokens": 2894,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/validation/service.go": {
            "lines": 383,
            "tokens": 3279,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 266,
            "percentage": 7.83,
            "percentageTokens": 8.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/server/server.go": {
            "lines": 104,
            "tokens": 718,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/server/handlers.go": {
            "lines": 186,
            "tokens": 1495,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 42,
            "duplicatedTokens": 368,
            "percentage": 22.58,
            "percentageTokens": 24.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "internal/server/container.go": {
            "lines": 43,
            "tokens": 239,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "cmd/myproject/main.go": {
            "lines": 55,
            "tokens": 346,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 142,
            "percentage": 32.73,
            "percentageTokens": 41.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "cmd/goreleaser-cli/version.go": {
            "lines": 41,
            "tokens": 248,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 142,
            "percentage": 43.9,
            "percentageTokens": 57.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "cmd/goreleaser-cli/verify.go": {
            "lines": 797,
            "tokens": 6604,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 103,
            "percentage": 1.25,
            "percentageTokens": 1.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "cmd/goreleaser-cli/validate.go": {
            "lines": 416,
            "tokens": 3084,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 103,
            "percentage": 2.4,
            "percentageTokens": 3.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "cmd/goreleaser-cli/types.go": {
            "lines": 195,
            "tokens": 1145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "cmd/goreleaser-cli/server.go": {
            "lines": 105,
            "tokens": 734,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "cmd/goreleaser-cli/main.go": {
            "lines": 94,
            "tokens": 491,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "cmd/goreleaser-cli/license.go": {
            "lines": 327,
            "tokens": 2439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "cmd/goreleaser-cli/config.go": {
            "lines": 294,
            "tokens": 2186,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration_test.go": {
            "lines": 12,
            "tokens": 45,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 9067,
          "tokens": 70086,
          "sources": 36,
          "clones": 25,
          "duplicatedLines": 343,
          "duplicatedTokens": 3183,
          "percentage": 3.78,
          "percentageTokens": 4.54,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "markup": {
        "sources": {
          "duplication-report/html/index.html": {
            "lines": 203,
            "tokens": 4980,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 192,
            "percentage": 7.88,
            "percentageTokens": 3.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 203,
          "tokens": 4980,
          "sources": 1,
          "clones": 1,
          "duplicatedLines": 8,
          "duplicatedTokens": 96,
          "percentage": 3.94,
          "percentageTokens": 1.93,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "bash": {
        "sources": {
          "scripts/generate-license.sh": {
            "lines": 318,
            "tokens": 2022,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "verify.sh": {
            "lines": 584,
            "tokens": 2494,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 106,
            "percentage": 3.25,
            "percentageTokens": 4.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "validate-strict.sh": {
            "lines": 583,
            "tokens": 3439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "validate-env.sh": {
            "lines": 659,
            "tokens": 4094,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 106,
            "percentage": 2.88,
            "percentageTokens": 2.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "validate-commands.sh": {
            "lines": 134,
            "tokens": 665,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 2278,
          "tokens": 12714,
          "sources": 5,
          "clones": 1,
          "duplicatedLines": 19,
          "duplicatedTokens": 106,
          "percentage": 0.83,
          "percentageTokens": 0.83,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 12026,
      "tokens": 94817,
      "sources": 46,
      "clones": 27,
      "duplicatedLines": 370,
      "duplicatedTokens": 3385,
      "percentage": 3.08,
      "percentageTokens": 3.57,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "go",
      "lines": 17,
      "fragment": "() templ.Component {\n\treturn templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {\n\t\ttempl_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context\n\t\tif templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {\n\t\t\treturn templ_7745c5c3_CtxErr\n\t\t}\n\t\ttempl_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)\n\t\tif !templ_7745c5c3_IsBuffer {\n\t\t\tdefer func() {\n\t\t\t\ttempl_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)\n\t\t\t\tif templ_7745c5c3_Err == nil {\n\t\t\t\t\ttempl_7745c5c3_Err = templ_7745c5c3_BufErr\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t\tctx = templ.InitializeContext(ctx)\n\t\ttempl_7745c5c3_Var2",
      "tokens": 0,
      "firstFile": {
        "name": "web/templates/index_templ.go",
        "start": 40,
        "end": 56,
        "startLoc": {
          "line": 40,
          "column": 6,
          "position": 291
        },
        "endLoc": {
          "line": 56,
          "column": 20,
          "position": 457
        }
      },
      "secondFile": {
        "name": "web/templates/index_templ.go",
        "start": 11,
        "end": 27,
        "startLoc": {
          "line": 11,
          "column": 13,
          "position": 27
        },
        "endLoc": {
          "line": 27,
          "column": 20,
          "position": 193
        }
      }
    },
    {
      "format": "go",
      "lines": 22,
      "fragment": "() templ.Component {\n\treturn templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {\n\t\ttempl_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context\n\t\tif templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {\n\t\t\treturn templ_7745c5c3_CtxErr\n\t\t}\n\t\ttempl_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)\n\t\tif !templ_7745c5c3_IsBuffer {\n\t\t\tdefer func() {\n\t\t\t\ttempl_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)\n\t\t\t\tif templ_7745c5c3_Err == nil {\n\t\t\t\t\ttempl_7745c5c3_Err = templ_7745c5c3_BufErr\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t\tctx = templ.InitializeContext(ctx)\n\t\ttempl_7745c5c3_Var1 := templ.GetChildren(ctx)\n\t\tif templ_7745c5c3_Var1 == nil {\n\t\t\ttempl_7745c5c3_Var1 = templ.NopComponent\n\t\t}\n\t\tctx = templ.ClearChildren(ctx)\n\t\ttempl_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, \"<div class=\\\"space-y-6\\\"><div class=\\\"bg-white rounded-lg shadow-md p-6\\\"><h2 class=\\\"text-2xl font-bold text-gray-800 mb-4\\\">GoReleaser Configuration Editor</h2><p class=\\\"text-gray-600 mb-6\\\">Edit your .goreleaser.yaml configuration with real-time validation and syntax highlighting.</p><div class=\\\"grid grid-cols-1 lg:grid-cols-3 gap-6\\\"><!-- Editor Panel --><div class=\\\"lg:col-span-2\\\"><div class=\\\"bg-gray-50 rounded-lg p-4\\\"><div class=\\\"flex justify-between items-center mb-4\\\"><h3 class=\\\"text-lg font-semibold\\\">Configuration Editor</h3><div class=\\\"space-x-2\\\"><button hx-get=\\\"/api/config/load\\\" hx-target=\\\"#config-editor\\\" class=\\\"bg-blue-600 text-white px-3 py-1 text-sm rounded hover:bg-blue-700\\\">Load</button> <button hx-post=\\\"/config\\\" hx-include=\\\"#config-form\\\" hx-target=\\\"#save-result\\\" class=\\\"bg-green-600 text-white px-3 py-1 text-sm rounded hover:bg-green-700\\\">Save</button></div></div><form id=\\\"config-form\\\" class=\\\"space-y-4\\\"><textarea id=\\\"config-editor\\\" name=\\\"config\\\" rows=\\\"20\\\" class=\\\"w-full p-3 border border-gray-300 rounded-lg font-mono text-sm\\\" placeholder=\\\"# GoReleaser configuration\\nproject_name: my-project\\n\\nbefore:\\n  hooks:\\n    - go mod tidy\\n    - go generate ./...\\n\\nbuilds:\\n  - env:\\n      - CGO_ENABLED=0\\n    goos:\\n      - linux\\n      - windows\\n      - darwin\\n    goarch:\\n      - amd64\\n      - arm64\\n\\narchives:\\n  - format: tar.gz\\n    name_template: >-\\n      {{ .ProjectName }}_\\n      {{- title .Os }}_\\n      {{- if eq .Arch &quot;amd64&quot; }}x86_64\\n      {{- else if eq .Arch &quot;386&quot; }}i386\\n      {{- else }}{{ .Arch }}{{ end }}\\n    format_overrides:\\n    - goos: windows\\n      format: zip\\n\\nchecksum:\\n  name_template: 'checksums.txt'\\n\\nsnapshot:\\n  name_template: &quot;{{ incpatch .Version }}-next&quot;\\n\\nchangelog:\\n  sort: asc\\n  filters:\\n    exclude:\\n      - '^docs:'\\n      - '^test:'\\\"></textarea><div id=\\\"save-result\\\"></div></form></div></div><!-- Validation Panel --><div class=\\\"space-y-4\\\"><div class=\\\"bg-gray-50 rounded-lg p-4\\\"><h3 class=\\\"text-lg font-semibold mb-4\\\">Validation</h3><button hx-post=\\\"/api/v1/validate/config\\\" hx-include=\\\"#config-form\\\" hx-target=\\\"#validation-results\\\" class=\\\"w-full bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700 mb-4\\\">Validate Configuration</button><div id=\\\"validation-results\\\" class=\\\"space-y-2\\\"><div class=\\\"text-gray-500 text-sm\\\">Click \\\"Validate Configuration\\\" to check your config</div></div></div><div class=\\\"bg-gray-50 rounded-lg p-4\\\"><h3 class=\\\"text-lg font-semibold mb-4\\\">Environment Check</h3><button hx-post=\\\"/api/v1/validate/environment\\\" hx-target=\\\"#environment-results\\\" class=\\\"w-full bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700 mb-4\\\">Check Environment</button><div id=\\\"environment-results\\\" class=\\\"space-y-2\\\"><div class=\\\"text-gray-500 text-sm\\\">Click \\\"Check Environment\\\" to validate your setup</div></div></div><div class=\\\"bg-gray-50 rounded-lg p-4\\\"><h3 class=\\\"text-lg font-semibold mb-4\\\">Quick Templates</h3><div class=\\\"space-y-2\\\"><button class=\\\"w-full bg-gray-600 text-white px-3 py-2 text-sm rounded hover:bg-gray-700\\\" onclick=\\\"loadTemplate('basic')\\\">Basic Config</button> <button class=\\\"w-full bg-gray-600 text-white px-3 py-2 text-sm rounded hover:bg-gray-700\\\" onclick=\\\"loadTemplate('docker')\\\">With Docker</button> <button class=\\\"w-full bg-gray-600 text-white px-3 py-2 text-sm rounded hover:bg-gray-700\\\" onclick=\\\"loadTemplate('homebrew')\\\">With Homebrew</button></div></div></div></div></div></div>\"",
      "tokens": 0,
      "firstFile": {
        "name": "web/templates/config_templ.go",
        "start": 11,
        "end": 32,
        "startLoc": {
          "line": 11,
          "column": 14,
          "position": 27
        },
        "endLoc": {
          "line": 32,
          "column": 3549,
          "position": 254
        }
      },
      "secondFile": {
        "name": "web/templates/index_templ.go",
        "start": 11,
        "end": 32,
        "startLoc": {
          "line": 11,
          "column": 13,
          "position": 27
        },
        "endLoc": {
          "line": 32,
          "column": 2629,
          "position": 254
        }
      }
    },
    {
      "format": "go",
      "lines": 22,
      "fragment": "() templ.Component {\n\treturn templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {\n\t\ttempl_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context\n\t\tif templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {\n\t\t\treturn templ_7745c5c3_CtxErr\n\t\t}\n\t\ttempl_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)\n\t\tif !templ_7745c5c3_IsBuffer {\n\t\t\tdefer func() {\n\t\t\t\ttempl_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)\n\t\t\t\tif templ_7745c5c3_Err == nil {\n\t\t\t\t\ttempl_7745c5c3_Err = templ_7745c5c3_BufErr\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t\tctx = templ.InitializeContext(ctx)\n\t\ttempl_7745c5c3_Var2 := templ.GetChildren(ctx)\n\t\tif templ_7745c5c3_Var2 == nil {\n\t\t\ttempl_7745c5c3_Var2 = templ.NopComponent\n\t\t}\n\t\tctx = templ.ClearChildren(ctx)\n\t\ttempl_7745c5c3_Err = Base(\"Configuration Editor - GoReleaser Tool\"",
      "tokens": 0,
      "firstFile": {
        "name": "web/templates/config_templ.go",
        "start": 40,
        "end": 61,
        "startLoc": {
          "line": 40,
          "column": 7,
          "position": 291
        },
        "endLoc": {
          "line": 61,
          "column": 41,
          "position": 510
        }
      },
      "secondFile": {
        "name": "web/templates/index_templ.go",
        "start": 11,
        "end": 61,
        "startLoc": {
          "line": 11,
          "column": 13,
          "position": 27
        },
        "endLoc": {
          "line": 61,
          "column": 32,
          "position": 510
        }
      }
    },
    {
      "format": "go",
      "lines": 22,
      "fragment": ") templ.Component {\n\treturn templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {\n\t\ttempl_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context\n\t\tif templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {\n\t\t\treturn templ_7745c5c3_CtxErr\n\t\t}\n\t\ttempl_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)\n\t\tif !templ_7745c5c3_IsBuffer {\n\t\t\tdefer func() {\n\t\t\t\ttempl_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)\n\t\t\t\tif templ_7745c5c3_Err == nil {\n\t\t\t\t\ttempl_7745c5c3_Err = templ_7745c5c3_BufErr\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t\tctx = templ.InitializeContext(ctx)\n\t\ttempl_7745c5c3_Var1 := templ.GetChildren(ctx)\n\t\tif templ_7745c5c3_Var1 == nil {\n\t\t\ttempl_7745c5c3_Var1 = templ.NopComponent\n\t\t}\n\t\tctx = templ.ClearChildren(ctx)\n\t\ttempl_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, \"<!doctype html><html lang=\\\"en\\\"><head><meta charset=\\\"UTF-8\\\"><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"><title>\"",
      "tokens": 0,
      "firstFile": {
        "name": "web/templates/base_templ.go",
        "start": 11,
        "end": 32,
        "startLoc": {
          "line": 11,
          "column": 10,
          "position": 38
        },
        "endLoc": {
          "line": 32,
          "column": 147,
          "position": 264
        }
      },
      "secondFile": {
        "name": "web/templates/index_templ.go",
        "start": 11,
        "end": 32,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 28
        },
        "endLoc": {
          "line": 32,
          "column": 2629,
          "position": 254
        }
      }
    },
    {
      "format": "go",
      "lines": 11,
      "fragment": "validateScript := filepath.Join(testDir, \"verify.sh\")\n\trequire.True(suite.T(), helpers.FileExists(validateScript), \"Validation script should exist\")\n\n\t// Make script executable\n\terr := os.Chmod(validateScript, 0755)\n\trequire.NoError(suite.T(), err)\n\n\t// Execute validation\n\tresult := helpers.RunCommand(suite.T(), testDir, \"./verify.sh\")\n\n\t// Validation should handle missing tools gracefully",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/validation_test.go",
        "start": 168,
        "end": 178,
        "startLoc": {
          "line": 168,
          "column": 2,
          "position": 1369
        },
        "endLoc": {
          "line": 178,
          "column": 53,
          "position": 1468
        }
      },
      "secondFile": {
        "name": "tests/integration/validation_test.go",
        "start": 65,
        "end": 75,
        "startLoc": {
          "line": 65,
          "column": 4,
          "position": 428
        },
        "endLoc": {
          "line": 75,
          "column": 3,
          "position": 527
        }
      }
    },
    {
      "format": "go",
      "lines": 14,
      "fragment": ")\n\n\t\t\t// Run validation script\n\t\t\tvalidateScript := filepath.Join(testDir, \"verify.sh\")\n\t\t\trequire.True(suite.T(), helpers.FileExists(validateScript), \"Validation script should exist\")\n\n\t\t\t// Make script executable\n\t\t\terr := os.Chmod(validateScript, 0755)\n\t\t\trequire.NoError(suite.T(), err)\n\n\t\t\t// Execute validation\n\t\t\tresult := helpers.RunCommand(suite.T(), testDir, \"./verify.sh\")\n\n\t\t\t// Log output for debugging",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/validation_test.go",
        "start": 223,
        "end": 236,
        "startLoc": {
          "line": 223,
          "column": 8,
          "position": 1895
        },
        "endLoc": {
          "line": 236,
          "column": 28,
          "position": 2001
        }
      },
      "secondFile": {
        "name": "tests/integration/validation_test.go",
        "start": 62,
        "end": 75,
        "startLoc": {
          "line": 62,
          "column": 11,
          "position": 421
        },
        "endLoc": {
          "line": 75,
          "column": 3,
          "position": 527
        }
      }
    },
    {
      "format": "go",
      "lines": 15,
      "fragment": ")\n\t\t\tsuite.RegisterCleanup(cleanup)\n\n\t\t\t// Run validation script\n\t\t\tvalidateScript := filepath.Join(testDir, \"verify.sh\")\n\t\t\trequire.True(suite.T(), helpers.FileExists(validateScript), \"Validation script should exist\")\n\n\t\t\t// Make script executable\n\t\t\terr := os.Chmod(validateScript, 0755)\n\t\t\trequire.NoError(suite.T(), err)\n\n\t\t\t// Execute validation\n\t\t\tresult := helpers.RunCommand(suite.T(), testDir, \"./verify.sh\")\n\n\t\t\toutput",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/validation_test.go",
        "start": 320,
        "end": 334,
        "startLoc": {
          "line": 320,
          "column": 2,
          "position": 2686
        },
        "endLoc": {
          "line": 334,
          "column": 7,
          "position": 2800
        }
      },
      "secondFile": {
        "name": "tests/integration/validation_test.go",
        "start": 222,
        "end": 75,
        "startLoc": {
          "line": 222,
          "column": 8,
          "position": 1887
        },
        "endLoc": {
          "line": 75,
          "column": 3,
          "position": 527
        }
      }
    },
    {
      "format": "go",
      "lines": 12,
      "fragment": ")\n\tsuite.RegisterCleanup(func() { os.RemoveAll(testDir) })\n\n\t// Check if license generation script exists\n\tlicenseScript := filepath.Join(testDir, \"scripts\", \"generate-license.sh\")\n\trequire.True(suite.T(), helpers.FileExists(licenseScript), \"License generation script should exist\")\n\n\t// Make script executable\n\terr := os.Chmod(licenseScript, 0755)\n\trequire.NoError(suite.T(), err)\n\n\t// Test list functionality",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/license_test.go",
        "start": 156,
        "end": 167,
        "startLoc": {
          "line": 156,
          "column": 20,
          "position": 1232
        },
        "endLoc": {
          "line": 167,
          "column": 27,
          "position": 1336
        }
      },
      "secondFile": {
        "name": "tests/integration/license_test.go",
        "start": 133,
        "end": 144,
        "startLoc": {
          "line": 133,
          "column": 20,
          "position": 988
        },
        "endLoc": {
          "line": 144,
          "column": 27,
          "position": 1092
        }
      }
    },
    {
      "format": "go",
      "lines": 9,
      "fragment": "// Check if license generation script exists\n\tlicenseScript := filepath.Join(testDir, \"scripts\", \"generate-license.sh\")\n\trequire.True(suite.T(), helpers.FileExists(licenseScript), \"License generation script should exist\")\n\n\t// Make script executable\n\terr := os.Chmod(licenseScript, 0755)\n\trequire.NoError(suite.T(), err)\n\n\t// Try to run license generation without config",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/license_test.go",
        "start": 222,
        "end": 230,
        "startLoc": {
          "line": 222,
          "column": 2,
          "position": 1890
        },
        "endLoc": {
          "line": 230,
          "column": 48,
          "position": 1969
        }
      },
      "secondFile": {
        "name": "tests/integration/license_test.go",
        "start": 136,
        "end": 144,
        "startLoc": {
          "line": 136,
          "column": 2,
          "position": 1013
        },
        "endLoc": {
          "line": 144,
          "column": 27,
          "position": 1092
        }
      }
    },
    {
      "format": "go",
      "lines": 10,
      "fragment": "licenseScript := filepath.Join(testDir, \"scripts\", \"generate-license.sh\")\n\trequire.True(suite.T(), helpers.FileExists(licenseScript), \"License generation script should exist\")\n\n\t// Make script executable\n\terr = os.Chmod(licenseScript, 0755)\n\trequire.NoError(suite.T(), err)\n\n\t// Run license generation\n\tresult := helpers.RunCommand(suite.T(), testDir, \"./scripts/generate-license.sh\")\n\thelpers",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/license_test.go",
        "start": 270,
        "end": 279,
        "startLoc": {
          "line": 270,
          "column": 2,
          "position": 2362
        },
        "endLoc": {
          "line": 279,
          "column": 8,
          "position": 2463
        }
      },
      "secondFile": {
        "name": "tests/integration/license_test.go",
        "start": 96,
        "end": 106,
        "startLoc": {
          "line": 96,
          "column": 4,
          "position": 605
        },
        "endLoc": {
          "line": 106,
          "column": 3,
          "position": 707
        }
      }
    },
    {
      "format": "go",
      "lines": 9,
      "fragment": "// Run just command\n\t\t\tresult := helpers.RunCommandWithTimeout(suite.T(), cmd.timeout, testDir, \"just\", cmd.command)\n\n\t\t\tif cmd.expectSuccess {\n\t\t\t\tif result.ExitCode != 0 {\n\t\t\t\t\tsuite.T().Logf(\"Just %s output: %s\", cmd.command, result.Stdout)\n\t\t\t\t\tsuite.T().Logf(\"Just %s errors: %s\", cmd.command, result.Stderr)\n\t\t\t\t}\n\t\t\t\thelpers.AssertCommandSuccess(suite.T(), result, \"Just %s should succeed\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/justfile_test.go",
        "start": 207,
        "end": 215,
        "startLoc": {
          "line": 207,
          "column": 4,
          "position": 1730
        },
        "endLoc": {
          "line": 215,
          "column": 25,
          "position": 1849
        }
      },
      "secondFile": {
        "name": "tests/integration/justfile_test.go",
        "start": 91,
        "end": 99,
        "startLoc": {
          "line": 91,
          "column": 4,
          "position": 595
        },
        "endLoc": {
          "line": 99,
          "column": 29,
          "position": 714
        }
      }
    },
    {
      "format": "go",
      "lines": 20,
      "fragment": "(testDir)\n\n\t\t\t// Set up environment variables\n\t\t\tcleanup := helpers.SetEnvVars(suite.T(), fixtures.TestEnvironmentVars[\"minimal\"])\n\t\t\tsuite.RegisterCleanup(cleanup)\n\n\t\t\t// Check if just command is available\n\t\t\tif !suite.isJustAvailable() {\n\t\t\t\tsuite.T().Skip(\"just command not available\")\n\t\t\t}\n\n\t\t\t// Run just command\n\t\t\tresult := helpers.RunCommandWithTimeout(suite.T(), cmd.timeout, testDir, \"just\", cmd.command)\n\n\t\t\tif cmd.expectSuccess {\n\t\t\t\tif result.ExitCode != 0 {\n\t\t\t\t\tsuite.T().Logf(\"Just %s output: %s\", cmd.command, result.Stdout)\n\t\t\t\t\tsuite.T().Logf(\"Just %s errors: %s\", cmd.command, result.Stderr)\n\n\t\t\t\t\t// Allow warnings for validation commands",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/justfile_test.go",
        "start": 274,
        "end": 293,
        "startLoc": {
          "line": 274,
          "column": 10,
          "position": 2291
        },
        "endLoc": {
          "line": 293,
          "column": 42,
          "position": 2467
        }
      },
      "secondFile": {
        "name": "tests/integration/justfile_test.go",
        "start": 196,
        "end": 98,
        "startLoc": {
          "line": 196,
          "column": 15,
          "position": 1657
        },
        "endLoc": {
          "line": 98,
          "column": 2,
          "position": 697
        }
      }
    },
    {
      "format": "go",
      "lines": 14,
      "fragment": ")\n\t\t\t}\n\n\t\t\t// Run just command\n\t\t\tresult := helpers.RunCommandWithTimeout(suite.T(), cmd.timeout, testDir, \"just\", cmd.command)\n\n\t\t\tif cmd.expectSuccess {\n\t\t\t\tif result.ExitCode != 0 {\n\t\t\t\t\tsuite.T().Logf(\"Just %s output: %s\", cmd.command, result.Stdout)\n\t\t\t\t\tsuite.T().Logf(\"Just %s errors: %s\", cmd.command, result.Stderr)\n\t\t\t\t}\n\t\t\t\thelpers.AssertCommandSuccess(suite.T(), result, \"Just %s should succeed\", cmd.command)\n\n\t\t\t\t// Verify dist directory was created for successful builds",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/justfile_test.go",
        "start": 385,
        "end": 398,
        "startLoc": {
          "line": 385,
          "column": 35,
          "position": 3250
        },
        "endLoc": {
          "line": 398,
          "column": 59,
          "position": 3386
        }
      },
      "secondFile": {
        "name": "tests/integration/justfile_test.go",
        "start": 204,
        "end": 216,
        "startLoc": {
          "line": 204,
          "column": 29,
          "position": 1723
        },
        "endLoc": {
          "line": 216,
          "column": 2,
          "position": 1858
        }
      }
    },
    {
      "format": "go",
      "lines": 11,
      "fragment": ")\n\tsuite.RegisterCleanup(func() { os.RemoveAll(testDir) })\n\n\t// Set up environment variables\n\tcleanup := helpers.SetEnvVars(suite.T(), fixtures.TestEnvironmentVars[\"minimal\"])\n\tsuite.RegisterCleanup(cleanup)\n\n\t// Create a proper Go project structure\n\tsuite.setupGoProject(testDir)\n\n\t// Initialize Git repository",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/goreleaser_test.go",
        "start": 222,
        "end": 232,
        "startLoc": {
          "line": 222,
          "column": 24,
          "position": 1822
        },
        "endLoc": {
          "line": 232,
          "column": 29,
          "position": 1895
        }
      },
      "secondFile": {
        "name": "tests/integration/goreleaser_test.go",
        "start": 177,
        "end": 187,
        "startLoc": {
          "line": 177,
          "column": 25,
          "position": 1415
        },
        "endLoc": {
          "line": 187,
          "column": 63,
          "position": 1488
        }
      }
    },
    {
      "format": "go",
      "lines": 14,
      "fragment": ")\n\t\t\tsuite.RegisterCleanup(func() { os.RemoveAll(testDir) })\n\n\t\t\t// Set up environment variables\n\t\t\tcleanup := helpers.SetEnvVars(suite.T(), fixtures.TestEnvironmentVars[\"complete\"])\n\t\t\tsuite.RegisterCleanup(cleanup)\n\n\t\t\t// Create readme config\n\t\t\treadmeConfigDir := filepath.Join(testDir, \".readme\", \"configs\")\n\t\t\terr := os.MkdirAll(readmeConfigDir, 0755)\n\t\t\trequire.NoError(suite.T(), err)\n\n\t\t\tconfigPath := filepath.Join(readmeConfigDir, \"readme-config.yaml\")\n\t\t\thelpers.WriteFile(suite.T(), configPath, tc",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/components_test.go",
        "start": 42,
        "end": 55,
        "startLoc": {
          "line": 42,
          "column": 27,
          "position": 248
        },
        "endLoc": {
          "line": 55,
          "column": 3,
          "position": 390
        }
      },
      "secondFile": {
        "name": "tests/integration/license_test.go",
        "start": 246,
        "end": 259,
        "startLoc": {
          "line": 246,
          "column": 22,
          "position": 2129
        },
        "endLoc": {
          "line": 259,
          "column": 9,
          "position": 2271
        }
      }
    },
    {
      "format": "go",
      "lines": 12,
      "fragment": ")\n\tsuite.RegisterCleanup(func() { os.RemoveAll(testDir) })\n\n\t// Set up complete project\n\tsuite.setupGoProject(testDir)\n\tsuite.initGitRepo(testDir)\n\n\t// Set up environment variables\n\tcleanup := helpers.SetEnvVars(suite.T(), fixtures.TestEnvironmentVars[\"complete\"])\n\tsuite.RegisterCleanup(cleanup)\n\n\t// Generate license",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/components_test.go",
        "start": 191,
        "end": 202,
        "startLoc": {
          "line": 191,
          "column": 30,
          "position": 1680
        },
        "endLoc": {
          "line": 202,
          "column": 20,
          "position": 1761
        }
      },
      "secondFile": {
        "name": "tests/integration/justfile_test.go",
        "start": 419,
        "end": 430,
        "startLoc": {
          "line": 419,
          "column": 15,
          "position": 3602
        },
        "endLoc": {
          "line": 430,
          "column": 38,
          "position": 3683
        }
      }
    },
    {
      "format": "go",
      "lines": 8,
      "fragment": "readmeConfigDir := filepath.Join(testDir, \".readme\", \"configs\")\n\terr := os.MkdirAll(readmeConfigDir, 0755)\n\trequire.NoError(suite.T(), err)\n\n\tconfigPath := filepath.Join(readmeConfigDir, \"readme-config.yaml\")\n\thelpers.WriteFile(suite.T(), configPath, fixtures.ReadmeConfigs[\"complete\"])\n\n\t// Step 5: Generate license",
      "tokens": 0,
      "firstFile": {
        "name": "tests/integration/components_test.go",
        "start": 270,
        "end": 277,
        "startLoc": {
          "line": 270,
          "column": 2,
          "position": 2321
        },
        "endLoc": {
          "line": 277,
          "column": 28,
          "position": 2409
        }
      },
      "secondFile": {
        "name": "tests/integration/license_test.go",
        "start": 254,
        "end": 261,
        "startLoc": {
          "line": 254,
          "column": 2,
          "position": 2193
        },
        "endLoc": {
          "line": 261,
          "column": 35,
          "position": 2281
        }
      }
    },
    {
      "format": "go",
      "lines": 12,
      "fragment": ", dir, command string, args ...string) CommandResult {\n\tt.Helper()\n\n\tstart := time.Now()\n\tcmd := exec.Command(command, args...)\n\tcmd.Dir = dir\n\n\tvar stdout, stderr bytes.Buffer\n\tcmd.Stdout = &stdout\n\tcmd.Stderr = &stderr\n\n\tdone",
      "tokens": 0,
      "firstFile": {
        "name": "tests/helpers/test_helpers.go",
        "start": 58,
        "end": 69,
        "startLoc": {
          "line": 58,
          "column": 9,
          "position": 353
        },
        "endLoc": {
          "line": 69,
          "column": 5,
          "position": 452
        }
      },
      "secondFile": {
        "name": "tests/helpers/test_helpers.go",
        "start": 26,
        "end": 37,
        "startLoc": {
          "line": 26,
          "column": 2,
          "position": 90
        },
        "endLoc": {
          "line": 37,
          "column": 4,
          "position": 189
        }
      }
    },
    {
      "format": "go",
      "lines": 20,
      "fragment": "duration := time.Since(start)\n\n\texitCode := 0\n\tif err != nil {\n\t\tif exitErr, ok := err.(*exec.ExitError); ok {\n\t\t\texitCode = exitErr.ExitCode()\n\t\t} else {\n\t\t\texitCode = 1\n\t\t}\n\t}\n\n\treturn CommandResult{\n\t\tExitCode: exitCode,\n\t\tStdout:   stdout.String(),\n\t\tStderr:   stderr.String(),\n\t\tDuration: duration,\n\t}\n}\n\n// CopyDir recursively copies a directory",
      "tokens": 0,
      "firstFile": {
        "name": "tests/helpers/test_helpers.go",
        "start": 86,
        "end": 105,
        "startLoc": {
          "line": 86,
          "column": 2,
          "position": 584
        },
        "endLoc": {
          "line": 105,
          "column": 42,
          "position": 718
        }
      },
      "secondFile": {
        "name": "tests/helpers/test_helpers.go",
        "start": 38,
        "end": 57,
        "startLoc": {
          "line": 38,
          "column": 2,
          "position": 200
        },
        "endLoc": {
          "line": 57,
          "column": 59,
          "position": 334
        }
      }
    },
    {
      "format": "go",
      "lines": 25,
      "fragment": ",\n\t\t\twantErr:    false,\n\t\t},\n\t\t{\n\t\t\tname:       \"empty bucket name\",\n\t\t\tbucketName: \"\",\n\t\t\twantErr:    true,\n\t\t},\n\t\t{\n\t\t\tname:       \"too short\",\n\t\t\tbucketName: \"ab\",\n\t\t\twantErr:    true,\n\t\t},\n\t\t{\n\t\t\tname:       \"too long\",\n\t\t\tbucketName: \"this-is-a-very-long-bucket-name-that-exceeds-the-limit-of-63-chars\",\n\t\t\twantErr:    true,\n\t\t},\n\t\t{\n\t\t\tname:       \"uppercase letters\",\n\t\t\tbucketName: \"My-Bucket\",\n\t\t\twantErr:    true,\n\t\t},\n\t\t{\n\t\t\tname:       \"starts with hyphen\"",
      "tokens": 0,
      "firstFile": {
        "name": "internal/validation/validators_test.go",
        "start": 310,
        "end": 334,
        "startLoc": {
          "line": 310,
          "column": 20,
          "position": 1936
        },
        "endLoc": {
          "line": 334,
          "column": 21,
          "position": 2068
        }
      },
      "secondFile": {
        "name": "internal/validation/validators_test.go",
        "start": 235,
        "end": 259,
        "startLoc": {
          "line": 235,
          "column": 12,
          "position": 1471
        },
        "endLoc": {
          "line": 259,
          "column": 22,
          "position": 1603
        }
      }
    },
    {
      "format": "go",
      "lines": 16,
      "fragment": "issue.Severity == SeverityError {\n\t\t\t\tresult.Issues = append(result.Issues, issue)\n\t\t\t} else {\n\t\t\t\tresult.Warnings = append(result.Warnings, issue)\n\t\t\t}\n\t\t\t\n\t\t\tresult.ValidatedVariables[name] = VariableStatus{\n\t\t\t\tPresent: value != \"\",\n\t\t\t\tValid:   issue.Severity != SeverityCritical && issue.Severity != SeverityError,\n\t\t\t\tIssue:   issue.UserMessage,\n\t\t\t\tMasked:  maskValue(value),\n\t\t\t}\n\t\t}\n\t}\n\n\treturn",
      "tokens": 0,
      "firstFile": {
        "name": "internal/validation/service.go",
        "start": 87,
        "end": 102,
        "startLoc": {
          "line": 87,
          "column": 2,
          "position": 608
        },
        "endLoc": {
          "line": 102,
          "column": 7,
          "position": 741
        }
      },
      "secondFile": {
        "name": "internal/validation/service.go",
        "start": 52,
        "end": 67,
        "startLoc": {
          "line": 52,
          "column": 2,
          "position": 303
        },
        "endLoc": {
          "line": 67,
          "column": 31,
          "position": 436
        }
      }
    },
    {
      "format": "go",
      "lines": 11,
      "fragment": "(c *gin.Context) {\n\t// Get validation service\n\tvalidationService, err := do.InvokeAs[*service.ValidationService](s.injector)\n\tif err != nil {\n\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\"error\": \"Failed to get validation service\",\n\t\t})\n\t\treturn\n\t}\n\t\n\tstatus",
      "tokens": 0,
      "firstFile": {
        "name": "internal/server/handlers.go",
        "start": 99,
        "end": 109,
        "startLoc": {
          "line": 99,
          "column": 22,
          "position": 752
        },
        "endLoc": {
          "line": 109,
          "column": 7,
          "position": 835
        }
      },
      "secondFile": {
        "name": "internal/server/handlers.go",
        "start": 82,
        "end": 92,
        "startLoc": {
          "line": 82,
          "column": 27,
          "position": 605
        },
        "endLoc": {
          "line": 92,
          "column": 7,
          "position": 688
        }
      }
    },
    {
      "format": "go",
      "lines": 12,
      "fragment": "(c *gin.Context) {\n\t// Get template service\n\ttemplateService, err := do.InvokeAs[*service.TemplateService](s.injector)\n\tif err != nil {\n\t\tc.JSON(http.StatusInternalServerError, gin.H{\n\t\t\t\"error\": \"Failed to get template service\",\n\t\t})\n\t\treturn\n\t}\n\t\n\t// Render template\n\tif err := templateService.RenderTempl(c, templates.Config",
      "tokens": 0,
      "firstFile": {
        "name": "internal/server/handlers.go",
        "start": 134,
        "end": 145,
        "startLoc": {
          "line": 134,
          "column": 14,
          "position": 1057
        },
        "endLoc": {
          "line": 145,
          "column": 7,
          "position": 1158
        }
      },
      "secondFile": {
        "name": "internal/server/handlers.go",
        "start": 116,
        "end": 127,
        "startLoc": {
          "line": 116,
          "column": 13,
          "position": 900
        },
        "endLoc": {
          "line": 127,
          "column": 6,
          "position": 1001
        }
      }
    },
    {
      "format": "markup",
      "lines": 9,
      "fragment": "// Run just command\n\t\t\tresult := helpers.RunCommandWithTimeout(suite.T(), cmd.timeout, testDir, &quot;just&quot;, cmd.command)\n\n\t\t\tif cmd.expectSuccess {\n\t\t\t\tif result.ExitCode != 0 {\n\t\t\t\t\tsuite.T().Logf(&quot;Just %s output: %s&quot;, cmd.command, result.Stdout)\n\t\t\t\t\tsuite.T().Logf(&quot;Just %s errors: %s&quot;, cmd.command, result.Stderr)\n\t\t\t\t}\n\t\t\t\thelpers.AssertCommandSuccess(suite.T(), result, &quot;Just %s should succeed&quot;,",
      "tokens": 0,
      "firstFile": {
        "name": "duplication-report/html/index.html",
        "start": 96,
        "end": 104,
        "startLoc": {
          "line": 96,
          "column": 4,
          "position": 2970
        },
        "endLoc": {
          "line": 104,
          "column": 2,
          "position": 3066
        }
      },
      "secondFile": {
        "name": "duplication-report/html/index.html",
        "start": 66,
        "end": 74,
        "startLoc": {
          "line": 66,
          "column": 2,
          "position": 2393
        },
        "endLoc": {
          "line": 74,
          "column": 3,
          "position": 2489
        }
      }
    },
    {
      "format": "go",
      "lines": 19,
      "fragment": ")\n}\n\nfunc printVersion() {\n\tfmt.Printf(\"Version:      %s\\n\", version)\n\tfmt.Printf(\"Commit:       %s\\n\", commit)\n\tfmt.Printf(\"Built:        %s\\n\", date)\n\tfmt.Printf(\"Built by:     %s\\n\", builtBy)\n\tfmt.Printf(\"Go version:   %s\\n\", runtime.Version())\n\tfmt.Printf(\"OS/Arch:      %s/%s\\n\", runtime.GOOS, runtime.GOARCH)\n\n\tif gitDescription != \"\" {\n\t\tfmt.Printf(\"Git describe: %s\\n\", gitDescription)\n\t}\n\n\tif gitState != \"\" {\n\t\tfmt.Printf(\"Git state:    %s\\n\", gitState)\n\t}\n}",
      "tokens": 0,
      "firstFile": {
        "name": "cmd/goreleaser-cli/version.go",
        "start": 24,
        "end": 42,
        "startLoc": {
          "line": 24,
          "column": 11,
          "position": 106
        },
        "endLoc": {
          "line": 42,
          "column": 2,
          "position": 248
        }
      },
      "secondFile": {
        "name": "cmd/myproject/main.go",
        "start": 38,
        "end": 56,
        "startLoc": {
          "line": 38,
          "column": 8,
          "position": 204
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 346
        }
      }
    },
    {
      "format": "go",
      "lines": 11,
      "fragment": "// Basic YAML syntax validation - check for common issues\n\t\tcontentStr := string(content)\n\t\tlines := strings.Split(contentStr, \"\\n\")\n\t\tfor i, line := range lines {\n\t\t\tline = strings.TrimSpace(line)\n\t\t\tif line == \"\" || strings.HasPrefix(line, \"#\") {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// Check for tabs (YAML doesn't allow them)\n\t\t\tif strings.Contains(line, \"\\t\") {\n\t\t\t\tfmt",
      "tokens": 0,
      "firstFile": {
        "name": "cmd/goreleaser-cli/validate.go",
        "start": 158,
        "end": 168,
        "startLoc": {
          "line": 158,
          "column": 3,
          "position": 1072
        },
        "endLoc": {
          "line": 168,
          "column": 4,
          "position": 1175
        }
      },
      "secondFile": {
        "name": "cmd/goreleaser-cli/verify.go",
        "start": 236,
        "end": 246,
        "startLoc": {
          "line": 236,
          "column": 2,
          "position": 1681
        },
        "endLoc": {
          "line": 246,
          "column": 9,
          "position": 1784
        }
      }
    },
    {
      "format": "bash",
      "lines": 20,
      "fragment": "log_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[✓]${NC} $1\"\n    ((CHECKS++))\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[⚠]${NC} $1\"\n    ((WARNINGS++))\n}\n\nlog_error() {\n    echo -e \"${RED}[✗]${NC} $1\"\n    ((ERRORS++))\n}\n\nlog_critical",
      "tokens": 0,
      "firstFile": {
        "name": "validate-env.sh",
        "start": 117,
        "end": 136,
        "startLoc": {
          "line": 117,
          "column": 1,
          "position": 614
        },
        "endLoc": {
          "line": 136,
          "column": 13,
          "position": 720
        }
      },
      "secondFile": {
        "name": "verify.sh",
        "start": 25,
        "end": 44,
        "startLoc": {
          "line": 25,
          "column": 1,
          "position": 71
        },
        "endLoc": {
          "line": 44,
          "column": 14,
          "position": 177
        }
      }
    }
  ],
  "filename": "/Users/larsartmann/.bun/install/global/node_modules/@jscpd/html-reporter/dist/templates/main.pug"
}