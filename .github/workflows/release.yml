name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write # For cosign signing

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
        continue-on-error: true
        
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0
        
      - name: Install UPX
        run: |
          sudo apt-get update
          sudo apt-get install -y upx
          
      - name: Install templ
        run: go install github.com/a-h/templ/cmd/templ@latest
        if: hashFiles('**/*.templ') != ''
        
      - name: Run Tests
        run: go test -v ./...
        
      - name: Run GoReleaser (Free Version)
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          
          # Docker
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          
          # Project info
          PROJECT_DESCRIPTION: ${{ secrets.PROJECT_DESCRIPTION }}
          VENDOR_NAME: ${{ secrets.VENDOR_NAME }}
          MAINTAINER_NAME: ${{ secrets.MAINTAINER_NAME }}
          MAINTAINER_EMAIL: ${{ secrets.MAINTAINER_EMAIL }}
          
          # Cosign
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        if: ${{ !contains(github.event.repository.topics, 'goreleaser-pro') }}
        
      - name: Run GoReleaser (Pro Version)
        uses: goreleaser/goreleaser-action@v6
        with:
          version: '~> v2'
          args: release --clean --config .goreleaser.pro.yaml
          distribution: goreleaser-pro
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          
          # Docker
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          
          # Project info
          PROJECT_DESCRIPTION: ${{ secrets.PROJECT_DESCRIPTION }}
          VENDOR_NAME: ${{ secrets.VENDOR_NAME }}
          MAINTAINER_NAME: ${{ secrets.MAINTAINER_NAME }}
          MAINTAINER_EMAIL: ${{ secrets.MAINTAINER_EMAIL }}
          
          # Package repositories
          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}
          FURY_ACCOUNT: ${{ secrets.FURY_ACCOUNT }}
          
          # Homebrew
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          
          # Scoop
          SCOOP_GITHUB_TOKEN: ${{ secrets.SCOOP_GITHUB_TOKEN }}
          
          # AUR
          AUR_KEY: ${{ secrets.AUR_KEY }}
          
          # Cloud storage
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          
          GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          
          # Artifactory
          ARTIFACTORY_HOST: ${{ secrets.ARTIFACTORY_HOST }}
          ARTIFACTORY_REPO: ${{ secrets.ARTIFACTORY_REPO }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          
          # Notifications
          DISCORD_WEBHOOK_ID: ${{ secrets.DISCORD_WEBHOOK_ID }}
          DISCORD_WEBHOOK_TOKEN: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WEBHOOK_TOKEN: ${{ secrets.WEBHOOK_TOKEN }}
          
          # Email
          SMTP_FROM: ${{ secrets.SMTP_FROM }}
          SMTP_TO: ${{ secrets.SMTP_TO }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          
          # Cosign
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        if: ${{ contains(github.event.repository.topics, 'goreleaser-pro') }}
        
      - name: Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: dist/
          retention-days: 7
          
  verify-release:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: dist/
          
      - name: Verify Checksums
        run: |
          cd dist
          if [ -f checksums.txt ]; then
            sha256sum -c checksums.txt
          fi
          
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        
      - name: Verify Signatures
        run: |
          cd dist
          for sig in *.sig; do
            if [ -f "$sig" ]; then
              artifact="${sig%.sig}"
              if [ -f "${artifact}.pem" ]; then
                echo "Verifying $artifact..."
                cosign verify-blob \
                  --certificate "${artifact}.pem" \
                  --signature "$sig" \
                  "$artifact"
              fi
            fi
          done
        continue-on-error: true # Signatures might not be present in free version