name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: "1.23"

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        install-only: true
        version: '~> v2'
        
    - name: Install Just
      uses: extractions/setup-just@v2
      with:
        just-version: '1.36.0'
        
    - name: Install additional tools
      run: |
        # Install yq for YAML processing
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        # Install golangci-lint
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.60.3
        
    - name: Verify tools installation
      run: |
        go version
        just --version
        goreleaser --version
        yq --version
        golangci-lint --version
        
    - name: Set up test environment variables
      run: |
        echo "GITHUB_TOKEN=test-token" >> $GITHUB_ENV
        echo "DOCKER_USERNAME=testuser" >> $GITHUB_ENV
        echo "DOCKER_PASSWORD=testpass" >> $GITHUB_ENV
        echo "PROJECT_NAME=integration-test-project" >> $GITHUB_ENV
        echo "PROJECT_DESCRIPTION=Integration test project for GoReleaser template" >> $GITHUB_ENV
        echo "PROJECT_AUTHOR=GitHub Actions" >> $GITHUB_ENV
        echo "PROJECT_EMAIL=actions@github.com" >> $GITHUB_ENV
        echo "PROJECT_URL=https://github.com/${{ github.repository }}" >> $GITHUB_ENV
        echo "LICENSE_TYPE=MIT" >> $GITHUB_ENV
        
    - name: Download Go modules
      run: go mod download
      
    - name: Run integration tests
      run: |
        go test -v -race -coverprofile=integration-coverage.out -coverpkg=./... ./tests/integration/...
        
    - name: Run integration tests with timeout
      timeout-minutes: 30
      run: |
        go test -v -race -timeout=25m -coverprofile=integration-coverage.out -coverpkg=./... ./tests/integration/...
        
    - name: Generate coverage report
      run: |
        go tool cover -html=integration-coverage.out -o integration-coverage.html
        go tool cover -func=integration-coverage.out
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: integration-coverage-reports
        path: |
          integration-coverage.out
          integration-coverage.html
        retention-days: 30
        
    - name: Run basic validation
      run: |
        chmod +x ./verify.sh
        ./verify.sh
        
    - name: Test just commands
      run: |
        just init
        just fmt
        just clean
        
    - name: Test license generation
      run: |
        chmod +x ./scripts/generate-license.sh
        ./scripts/generate-license.sh --help
        ./scripts/generate-license.sh --list
        
    - name: Test GoReleaser configuration
      run: |
        goreleaser check
        goreleaser build --snapshot --single-target
        
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-artifacts
        path: |
          dist/
          *.log
        retention-days: 7
        if-no-files-found: ignore

  integration-tests-matrix:
    name: Integration Tests (Matrix)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ["1.23", "1.22"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.go-version }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.go-version }}-go-
          
    - name: Install GoReleaser (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: goreleaser/goreleaser-action@v6
      with:
        install-only: true
        version: '~> v2'
        
    - name: Install GoReleaser (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install goreleaser/tap/goreleaser
        
    - name: Install Just
      uses: extractions/setup-just@v2
      with:
        just-version: '1.36.0'
        
    - name: Set up test environment variables
      run: |
        echo "GITHUB_TOKEN=test-token" >> $GITHUB_ENV
        echo "DOCKER_USERNAME=testuser" >> $GITHUB_ENV
        echo "DOCKER_PASSWORD=testpass" >> $GITHUB_ENV
        echo "PROJECT_NAME=matrix-test-project" >> $GITHUB_ENV
        echo "LICENSE_TYPE=MIT" >> $GITHUB_ENV
        
    - name: Run focused integration tests
      run: |
        # Run a subset of integration tests for the matrix
        go test -v -race -timeout=20m ./tests/integration/ -run "TestLicenseGeneration|TestGoReleaserConfiguration|TestJustCommands"
        
    - name: Test basic functionality
      run: |
        chmod +x ./verify.sh
        ./verify.sh || echo "Validation completed with warnings"

  test-coverage-report:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        name: integration-coverage-reports
        
    - name: Display coverage summary
      run: |
        if [ -f integration-coverage.out ]; then
          echo "## Integration Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go tool cover -func=integration-coverage.out >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "No coverage report found" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('integration-coverage.out')) {
            const { execSync } = require('child_process');
            const coverage = execSync('go tool cover -func=integration-coverage.out').toString();
            
            const body = `## Integration Test Coverage Report
            
            \`\`\`
            ${coverage}
            \`\`\`
            
            Generated by integration tests in workflow run: ${{ github.run_id }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }