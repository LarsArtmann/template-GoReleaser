# Docker Compose configuration for GoReleaser Template development
# This provides a complete development environment with all necessary services

version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder  # Use builder stage for development
    container_name: goreleaser-template-app
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "8443:8443"  # HTTPS port
    environment:
      # Application configuration
      - APP_ENV=development
      - APP_PORT=8080
      - APP_HOST=0.0.0.0
      - LOG_LEVEL=debug
      - LOG_FORMAT=console
      
      # Development specific settings
      - GIN_MODE=debug
      - CGO_ENABLED=0
      - GOOS=linux
      
      # Load from .env file
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - DOCKER_REGISTRY=${DOCKER_REGISTRY:-ghcr.io}
      - PROJECT_NAME=${PROJECT_NAME:-goreleaser-template}
      
      # Health check configuration
      - HEALTH_CHECK_ENDPOINT=/health
      - READY_CHECK_ENDPOINT=/ready
    volumes:
      # Mount source code for development
      - .:/workspace:cached
      - ./tmp:/tmp:cached
      
      # Mount go mod cache for faster builds
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
      
      # Mount config and templates
      - ./templates:/app/templates:ro
      - ./assets:/app/assets:ro
      
      # Mount output directories
      - ./dist:/app/dist
      - ./coverage:/app/coverage
    working_dir: /workspace
    command: >
      sh -c "
        echo 'Starting development environment...' &&
        go mod download &&
        go run ./cmd/goreleaser-cli/ --port 8080 --host 0.0.0.0
      "
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.docker.compose.service=goreleaser-template"
      - "com.docker.compose.project=goreleaser-template"
    networks:
      - goreleaser-net

  # Development tools container
  tools:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: goreleaser-template-tools
    profiles:
      - tools  # Only start when explicitly requested
    environment:
      - CGO_ENABLED=0
    volumes:
      - .:/workspace:cached
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    working_dir: /workspace
    command: tail -f /dev/null  # Keep container running
    networks:
      - goreleaser-net

  # Testing container for running tests
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: goreleaser-template-test
    profiles:
      - test  # Only start when explicitly requested
    environment:
      - CGO_ENABLED=0
      - GO_ENV=test
    volumes:
      - .:/workspace:cached
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
      - ./coverage:/workspace/coverage
    working_dir: /workspace
    command: >
      sh -c "
        echo 'Running tests...' &&
        go test -v -race -coverprofile=coverage/coverage.out ./... &&
        go tool cover -html=coverage/coverage.out -o coverage/coverage.html &&
        echo 'Tests completed. Coverage report generated at coverage/coverage.html'
      "
    networks:
      - goreleaser-net

  # GoReleaser container for building releases
  release:
    image: goreleaser/goreleaser:latest
    container_name: goreleaser-template-release
    profiles:
      - release  # Only start when explicitly requested
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - DOCKER_CLI_EXPERIMENTAL=enabled
    volumes:
      - .:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker builds
      - ~/.gitconfig:/root/.gitconfig:ro  # Git configuration
      - ~/.ssh:/root/.ssh:ro  # SSH keys for Git operations
    working_dir: /workspace
    command: >
      sh -c "
        echo 'Building release with GoReleaser...' &&
        goreleaser check &&
        goreleaser build --snapshot --clean
      "
    networks:
      - goreleaser-net

  # Documentation server (optional)
  docs:
    image: nginx:alpine
    container_name: goreleaser-template-docs
    profiles:
      - docs  # Only start when explicitly requested
    ports:
      - "8081:80"
    volumes:
      - ./docs:/usr/share/nginx/html:ro
      - ./coverage:/usr/share/nginx/html/coverage:ro
    networks:
      - goreleaser-net

# Named volumes for caching
volumes:
  go-mod-cache:
    driver: local
  go-build-cache:
    driver: local

# Custom network
networks:
  goreleaser-net:
    driver: bridge
    name: goreleaser-template-network

# Docker Compose usage examples:
#
# Development (default):
#   docker-compose up
#
# With tools container:
#   docker-compose --profile tools up
#
# Run tests:
#   docker-compose --profile test up test
#
# Build release:
#   docker-compose --profile release up release
#
# With documentation server:
#   docker-compose --profile docs up app docs
#
# All services:
#   docker-compose --profile tools --profile test --profile release --profile docs up
#
# Development workflow:
#   docker-compose up -d                    # Start development environment
#   docker-compose exec app go test ./...   # Run tests in container
#   docker-compose exec tools just lint     # Run linting
#   docker-compose down                     # Stop all services
#
# Clean up:
#   docker-compose down --volumes --remove-orphans